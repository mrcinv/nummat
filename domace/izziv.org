* Numerični izziv
Izziv, ki bi ga objavil v obliki lova za zakladom. Povezavo na naslednje
vprašanje je enaka rezultatu prejšnje naloge. Vse naloge je treba rešiti z
relativno natančnostjo *12 decimalk*
* Nelinearne enačbe
** Samopresečišče krivulje
Krivulja je podana parametrično
\begin{eqnarray}
x(t) &=& -2x^3+x^2+x\\
y(t) &=& -14x^3+20x^2-8x+1 
\end{eqnarray}
Koliko je razdalja samopresečišča krivulje do koordinatnega izhodišča?
*** Rešitev
#+BEGIN_SRC julia :session :results value
  using Polynomials;
  q = Poly([0, 1, 1, -2]);
  p = Poly([1, -8, 20, -14]);
  F(t,s) = [q(t)-q(s), p(t)-p(s)];
  J(t,s) = [q'(t) -q'(s); p'(t) -p'(s)];
  ts = [0,1];
  for i = 1:10
      z = F(ts[1],ts[2]);
      dz = J(ts[1],ts[2])\z;
      ts = ts - dz; 
      if (norm(z)<1e-15) & (norm(dz)<1e-15)
        #println(i)
        break;
      end
      #println(z)
  end
  a = round(sqrt(q(ts[1])^2+p(ts[1])^2),12);
#+END_SRC

#+RESULTS:
: 0.333413466366

#+NAME: mathjax 
#+BEGIN_SRC html
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" async src="path-to-mathjax/MathJax.js?config=TeX-AMS_CHTML">
</script>
#+END_SRC

#+NAME: form
#+BEGIN_SRC html
<form onSubmit=" location.href = './' + document.getElementById('answer').value+'.html'; return false; ">

Odgovor: 
<INPUT type="text" name="url" id="answer">
<INPUT type="submit" value="Preveri">
</FORM>

</body>
#+END_SRC


** Ničla funkcije
Izračunaj ničlo funkcije, ki jo vrača oracle
** Minimum funkcije dveh spremenljivk
Poišči minimum funkcije dveh spremenljivk, ki jo vrača oracle. Oracle vrača tudi
gradient in hessian.
* Linearni sistemi
** Konja na šahovnici
Na šahovnici sta dva konja, ki naključno skačeta po poljih (vsaka možna poteza
je enako verjetna). Izračunaj, koliko je pričakovano število potez, po katerih
en konj poje drugega. Konja sta na začetku na nasprotnih vogalih šahovnice.
*** Rešitev
Napišimo markovsko verigo za enega konja. Verigo lahko predstavimo s $64\times
64$ matriko. Sestavimo najprej matriko, ki označi možne poteze.
#+BEGIN_SRC julia :session
  index(i,j,n) = j + (i-1)*n  
  konj = spzeros(64,64)
  sosedi = [1 2; 2 1; -1 2; 2 -1; 1 -2; -2 1; -2 -1; -1 -2]
  for i=1:8, j=1:8
      ii = index(i,j,8);
      for s = 1:8
          jj = index(([i j]+sosedi[s,:])...,8)y
          if 1<=jj<=64
              konj[ii,jj]=1;
          end
      end
      konj[ii,:] = konj[ii,:]/sum(konj[ii,:]);
  end
  N = 64*64
  M = spzeros(N,N)
  for i=1:8, j=1:8, k=1:8, l=1:8
      ii = index(i,j,8);
      kk = index(k,l,8);
      nn = index(ii,kk,64);
      for s=1:8, t=1:8
          jj = index(([i j]+sosedi[s,:])...,8)
          ll = index(([k l]+sosedi[t,:])...,8)
          mm = index(jj,ll,64)
          if (1<=jj<=64) and (1<=ll<=64)
              M[nn,mm] = konj[ii,jj]*konj[kk,ll]
          end
      end
  end
  absorbing = Set([index(i,i,64) for i in 1:64])
  transitional = filter(x->!in(x,absorbing),1:N)
  Q = speye(N-64) - M[transitional,transitional]


#+END_SRC

#+RESULTS:
Sedaj imamo dva konja na šahovnici, kar pomeni, da imamo $64\times 64$ možnih
položajev. Prehodna matrika med temi položaji dobimo tako, da izračunamo
tenzorski produkt obeh matrik.
#+BEGIN_SRC julia :session
N = 64*64
prehodna = spzeros(N,N)

non
#+END_SRC 
* Integrali
** Povprečna razdalja
Izračunaj povprečno razdaljo med dvema točkama v telesu
** Dolžina zanke Bèzierove krivulje
Izračunaj dolžino zanke Bèzierove krivulje
*** Težja varianta
Funkcija $F(a,b)$ je enaka ploščini zanke, ki jo omejuje bèzierova krivulja podana s poligonom

$$P(a,b) = (1,0)$$
Izračunaj dvojni integral
$$\int\int_D F(a,b)da db,$$
kjer je  $D$ območje $[0,1]^2$.
*** Dolžino zlepka  
Dolžina zlepka, sestavljenega iz 10^5 bèzierovih krivulj.
* Diferencialne enačbe
** Integral rešitve DE
Naj bo $f(x)$ rešitev diferencialne enačbe
\[ y''=f(x,y,y')\]
z začetnim pogojem $y(0)=y'(0)=1$. Izračunaj 
\[ \int_0^1 y(x)dx.\]
** Ničla rešitve DE
** Maksimum rešitve DE
** Dolžina implicitno podane krivulje
Krivulja je podana implicitno z enačbama
\begin{eqnarray*}
F(x,y)&=&x^4+y^2/2+z^2= 12\\
G(x,y)&=&x^2+y^2-4z^2= 8\\
\end{eqnarray*}
Izračunaj dolžino krivulje. Namig: Tangenta na krivuljo je vzporedna
\[\nabla F\times\nabla G\].
*** Rešitev
Krivulja je rešitev sistema diferencialnih enačb
\[\dot{\mathbf{r}}(t)=\nabla F\times\nabla G\]
Če desno stran normiramo, bo krivulja parametrizirana z naravnim parametrom.
\[ \dot{\mathbf{r}}(s)=\frac{\nabla F\times\nabla G}{\|\nabla F\times\nabla
G\|} = H(\mathbf{r}) \]
Za začetni pogoj moramo poiskati točko na preseku
krivulj. Najprej 
#+BEGIN_SRC julia :session :results value
  F(x,y,z) = x^4+y^2/2+z^2-12
  G(x,y,z) = x^2+y^2-4z^2-8
  gradF(x,y,z) = [4x^3, y, 2z]
  gradG(x,y,z) = [2x,2y, -8z]
  H(x,y,z) = gradF(x,y,z) × gradG(x,y,z)
  N(x,y,z) = H(x,y,z)/norm(H(x,y,z));
  # začetni pogoj dobimo z Newtonovo metodo
  x0 = [1,5,0]
  normala = N(x0...)
  x = x0; k=0;
  z = [F(x...);G(x...);dot(normala,(x-x0))]
  while (norm(z)>1e-14) & (k<100)
    x = x - [gradF(x...) gradG(x...) normala]'\z
    z = [F(x...),G(x...),dot(normala,(x-x0))]
    k += 1
  end
  normala = N(x...)
  x0 = x
  x0,k,norm(z)
#+END_SRC

#+RESULTS:
|    1.7576843211737814 | 2.215975141354222 | 0 |
|                     8 |                   |   |
| 17763568394002505e-31 |                   |   |

Dolžino krivulje dobimo tako, da poiščemo parameter $s$, pri katerem je vrednost
enaka začetni vrednosti:
\[\mathbf{r}(0)=\mathbf{r}(s).\]
Lažje kot zgornjo enačbo je poiskati novo presečišče krivulje z ravnino, ki 
gre skozi začetno točko in je  pravokotna na krivuljo. V tem primeru imamo eno
samo enačbo z eno neznanko
\[f(s)=\mathbf{n}^T(\mathbf{r}(s)-\mathbf{r}(0))=0,\]
kjer je $\mathbf{n} = H(\mathbf{r}(0))$.
Rešitev zgornje enačbe lahko poiščemo s tangentno metodo. Odvod $f$ je enak 
\[f'(s)=\mathbf{n}^T\dot{\mathbf{r}(s)} \]
Diferencialno enačbo rešujemo z RK4, globalno napako pa preverimo z
Richardsonovo ekstrapolacijo.
Rešitev DE izračunamo z RK4
#+BEGIN_SRC julia :session :results value :tangle rk4.jl
function rk4(f,t0,tk,y0,n)
  t = linspace(t0,tk,n+1)
  k = length(y0)
  y = zeros(k,n+1)
  h = t[2]-t[1]
  y[:,1] = y0
  for i=1:n
    k1 = h*f(t[i],y[:,i])
    k2 = h*f(t[i]+h/2, y[:,i]+k1/2)
    k3 = h*f(t[i]+h/2, y[:,i]+k2/2)
    k4 = h*f(t[i]+h, y[:,i]+k3)
    y[:,i+1] = y[:,i] + (k1+2(k2+k3)+k4)/6
  end
  return y,t
end
de(t,x)  = N(x...)
n =7000
y2,t2 = rk4(de,0,8,x0,n)
y,t = rk4(de,0,8,x0,2n)
log10(vecnorm(y2-y[:,1:2:end],Inf))
#+END_SRC

#+RESULTS:
: -13.212650692461805

#+BEGIN_SRC julia :session :results value
dstop_fun(xn) = dot(normala,de(1,xn))
stop_fun(xn) = dot(normala,(xn-x0))
idx = 1
for i=1:(2*n)
  if stop_fun(y[:,i])*stop_fun(y[:,i+1])<0
     idx = i
     break
  end
end
t[idx]
#+END_SRC

#+RESULTS:
: 7.5528
Rezultat popravimo z Newtonovo metodo
#+BEGIN_SRC julia :session
tk = t[idx]
yk = y[:,idx]
for i=1:5 
   tn = tk - dstop_fun(yk)\stop_fun(yk)
   yy,tt = rk4(de,tk,tn,yk,1)
   yk = yy[:,end]
   tk = tn
end
tk,yk,stop_fun(yk)
#+END_SRC

#+RESULTS:
|     7.552933432027898 |                    |                       |
|   -1.7576843211737825 | 2.2159751413542037 | 12181011407874642e-32 |
| 12181011407874642e-32 |                    |                       |

|   7.552933432027913 |                  |                     |
| -1.7576843211737836 | 2.21597514135423 | 422296746183104e-31 |
| 422296746183104e-31 |                  |                     |

|     7.552933432027898 |                    |                       |
|   -1.7576843211737825 | 2.2159751413542037 | 12181011407874642e-32 |
| 12181011407874642e-32 |                    |                       |

** Ničle
** Perioda limitnega cikla
Poiščite periodo limitnega cikla za diferencialno enačbo
\[x''(t) - 4(1-x^2)x'(t)+x = 0. \]
*** Rešitev
** Ploščina
** Maksimalna vrednost rešitve DE
** 
